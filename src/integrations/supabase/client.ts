
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ygkhmcnpjjvmbrbyybik.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlna2htY25wamp2bWJyYnl5YmlrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgwNzI3NTUsImV4cCI6MjA1MzY0ODc1NX0.PCjfCJDHt_AdO7gomtkqhNZrFRB5zHpYo6JcJ52uB60";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function for working with many-to-many relationships
export const getRelatedRoutes = async (stopId: string) => {
  const { data, error } = await supabase
    .from('route_stops')
    .select(`
      route_id,
      order_number,
      routes (
        id,
        name,
        start_point,
        end_point,
        transport_type
      )
    `)
    .eq('stop_id', stopId);
  
  if (error) throw error;
  return data || [];
};

export const getRelatedHubs = async (stopId: string) => {
  const { data, error } = await supabase
    .from('hub_stops')
    .select(`
      hub_id,
      distance_meters,
      hubs (
        id,
        name,
        address,
        transport_type
      )
    `)
    .eq('stop_id', stopId);
  
  if (error) throw error;
  return data || [];
};

export const getStopsByRouteId = async (routeId: string) => {
  const { data, error } = await supabase
    .from('route_stops')
    .select(`
      stop_id,
      order_number,
      stops (*)
    `)
    .eq('route_id', routeId)
    .order('order_number', { ascending: true });
  
  if (error) throw error;
  return data || [];
};
